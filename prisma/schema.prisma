generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  FRONT_END
  BACK_END 
  UI_UX_DESIGN
  CG_ARTIST
}

enum Technology {
  HTML
  CSS
  JS
  REACT
  TS
  NEXT
  WEB
  SECURITY
}

model User {
  id            String     @id @default(cuid())
  name          String     @unique
  email         String     @unique
  emailVerified DateTime? 
  image         String?

  password      String
  role          Role
  rating        Int
  studyTimes    Int
  taskCompleted Int
  iconRating    String

  tasks         Task[]
  accounts      Account[]
  sessions      Session[]
  awards        UserReward[]
  leaderboard   Leaderboard[]

  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?


  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model PasswordResetToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
}

model UserReward {
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  reward    Reward @relation(fields: [rewardId], references: [id])
  rewardId  Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@id([userId, rewardId])
}

model Reward {
  id           Int    @id @default(autoincrement())
  name         String
  icon         String
  description  String
  points       Int
  role         Role
  awardedTo    UserReward[]
}

model Task {
  id           Int    @id @default(autoincrement())
  idTask       String @unique
  name         String
  points       Int    
  difficulty   String
  completed    Boolean @default(false)
  user         User   @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model QuizItem {
  id           Int          @id @default(autoincrement())
  number       Int          @unique
  description  String
  roles        Role[]
  technology   Technology
  optional     QuizAnswer[] @relation("QuizItemAnswers") 
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model QuizAnswer {
  id           Int          @id @default(autoincrement())
  text         String
  isCorrect    Boolean
  quizItem     QuizItem     @relation("QuizItemAnswers", fields: [quizItemId], references: [id], onDelete: Cascade)
  quizItemId   Int
}

model Leaderboard {
  id            Int    @id @default(autoincrement())
  user          User   @relation(fields: [userId], references: [id])
  userId        String    
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TwoFactorToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}